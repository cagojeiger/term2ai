[project]
name = "term2ai"
version = "0.1.0"
description = "A Python-based terminal wrapper with complete I/O control and AI integration"
readme = "README.md"
authors = [
    { name = "term2ai Team", email = "cagojeiger@naver.com" }
]
license = { text = "MIT" }
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Shells",
    "Topic :: Terminals",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["terminal", "pty", "shell", "emulator", "ai", "automation"]
dependencies = [
    "pexpect>=4.9.0",
    "ptyprocess>=0.7.0",
    "pydantic>=2.11.7",
    "rich>=14.0.0",
    "typer>=0.16.0",
    "aiofiles>=23.2.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.scripts]
term2ai = "term2ai.cli:app"

[project.urls]
Homepage = "https://github.com/yourusername/term2ai"
Repository = "https://github.com/yourusername/term2ai.git"
Documentation = "https://term2ai.readthedocs.io"
"Bug Tracker" = "https://github.com/yourusername/term2ai/issues"

[dependency-groups]
dev = [
    "bandit>=1.7.5",
    "black>=25.1.0",
    "hypothesis>=6.135.14",
    "mypy>=1.16.1",
    "pre-commit>=4.2.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
    "pytest-timeout>=2.4.0",
    "ruff>=0.12.0",
]
performance = [
    "uvloop>=0.19.0",
    "aiosignal>=1.3.1",
]
hijacking = [
    "keyboard>=0.13.5",
    "pynput>=1.7.6",
    "blessed>=1.20.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--cov=src/term2ai",
    "--cov-report=html",
    "--cov-report=term",
    "--cov-report=xml",
    "--cov-config=.coveragerc",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "ptyprocess.*",
    "pexpect.*",
    "aiofiles.*",
    "uvloop.*",
    "aiosignal.*",
    "keyboard.*",
    "pynput.*",
    "blessed.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "N",     # pep8-naming
    "B",     # flake8-bugbear
    "C90",   # mccabe
    "UP",    # pyupgrade
    "ARG",   # flake8-unused-arguments
    "SIM",   # flake8-simplify
    "RET",   # flake8-return
    "C4",    # flake8-comprehensions
    "PTH",   # flake8-use-pathlib
    "ASYNC", # flake8-async
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG", "SIM"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''
